// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(END_USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  templates Template[]
  contacts  Contact[]
  messages  Message[]

  @@map("users")
}

model Template {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("templates")
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  phoneNumber String
  label       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients MessageRecipient[]

  @@unique([userId, phoneNumber])
  @@map("contacts")
}

model Message {
  id        String           @id @default(cuid())
  content   String
  status    MessageStatus    @default(DRAFT)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String?
  template  Template?        @relation(fields: [templateId], references: [id])
  recipients MessageRecipient[]

  @@map("messages")
}

model MessageRecipient {
  id         String           @id @default(cuid())
  status     RecipientStatus  @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  messageId  String
  message    Message          @relation(fields: [messageId], references: [id], onDelete: Cascade)
  contactId  String
  contact    Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([messageId, contactId])
  @@map("message_recipients")
}

enum Role {
  ADMIN
  END_USER
}

enum MessageStatus {
  DRAFT
  SCHEDULED
  SENT
  FAILED
}

enum RecipientStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}